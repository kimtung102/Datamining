package App;

import java.util.logging.Level;
import java.util.logging.Logger;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.DecisionTreeModel;
import model.KNNModel;
import model.KnowledgeModel;
import model.NaiveBayesModel;
import model.NeuralNetworkModel;
import model.SVMModel;
import model.Wine;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.lazy.IBk;
import weka.classifiers.trees.J48;
import weka.core.Instances;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author tranluan
 */
public final class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    DecisionTreeModel decisionTreeModel;
    KNNModel KNNModel;
    NaiveBayesModel naiveBayesModel;
    NeuralNetworkModel neuralNetworkModel;
    SVMModel SVMModel;
    Instances labelData;
    public String currentPath = System.getProperty("user.dir");

    public Home() {
        initComponents();
        changeColorMenu(backgroundTrainMenuPanel, backgroundClassificationMenuPanel);
        visiblePanel(trainPanel, classificationPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup6 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        backroundPanel = new javax.swing.JPanel();
        sidePanel = new javax.swing.JPanel();
        wineImg = new javax.swing.JLabel();
        backgroundClassificationMenuPanel = new javax.swing.JPanel();
        classificationMenuLabel = new javax.swing.JLabel();
        backgroundTrainMenuPanel = new javax.swing.JPanel();
        trainMenuLabel = new javax.swing.JLabel();
        trainPanel = new javax.swing.JPanel();
        trainHeadingLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        trainPathLine = new javax.swing.JSeparator();
        pathTrainTextField = new javax.swing.JTextField();
        algorithmComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        chooseEvaluateFileBtn = new javax.swing.JButton();
        trainModelBtn = new javax.swing.JButton();
        saveModelBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTrainModelTextArea = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        pathEvaluateTextField = new javax.swing.JTextField();
        trainPathLine1 = new javax.swing.JSeparator();
        chooseTrainFileBtn1 = new javax.swing.JButton();
        classificationPanel = new javax.swing.JPanel();
        ClassificationHeadingLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textField4 = new javax.swing.JTextField();
        textField10 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textField11 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textField2 = new javax.swing.JTextField();
        textField8 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textField9 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        textField3 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textField5 = new javax.swing.JTextField();
        textField6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        textField7 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        predictTable = new javax.swing.JTable();
        predictBtn = new javax.swing.JButton();
        exportBtn = new javax.swing.JButton();
        predictFileBtn = new javax.swing.JButton();
        modelTypeComboBox = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        closeBtn = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Red Wine Quality Measure");
        setBackground(new java.awt.Color(255, 249, 219));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);

        backroundPanel.setBackground(new java.awt.Color(255, 245, 245));
        backroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sidePanel.setBackground(new java.awt.Color(250, 82, 82));
        sidePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        wineImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/App/wine-sm.png"))); // NOI18N
        wineImg.setText("jLabel5");
        sidePanel.add(wineImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 340));

        backgroundClassificationMenuPanel.setBackground(new java.awt.Color(250, 82, 82));
        backgroundClassificationMenuPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backgroundClassificationMenuPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundClassificationMenuPanelMouseClicked(evt);
            }
        });

        classificationMenuLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        classificationMenuLabel.setForeground(new java.awt.Color(255, 255, 255));
        classificationMenuLabel.setText("Wine Classification");
        classificationMenuLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        classificationMenuLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classificationMenuLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout backgroundClassificationMenuPanelLayout = new javax.swing.GroupLayout(backgroundClassificationMenuPanel);
        backgroundClassificationMenuPanel.setLayout(backgroundClassificationMenuPanelLayout);
        backgroundClassificationMenuPanelLayout.setHorizontalGroup(
            backgroundClassificationMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundClassificationMenuPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(classificationMenuLabel)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        backgroundClassificationMenuPanelLayout.setVerticalGroup(
            backgroundClassificationMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundClassificationMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classificationMenuLabel)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        sidePanel.add(backgroundClassificationMenuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 250, 40));

        backgroundTrainMenuPanel.setBackground(new java.awt.Color(250, 82, 82));
        backgroundTrainMenuPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backgroundTrainMenuPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundTrainMenuPanelMouseClicked(evt);
            }
        });

        trainMenuLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        trainMenuLabel.setForeground(new java.awt.Color(255, 255, 255));
        trainMenuLabel.setText("Train model");
        trainMenuLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trainMenuLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trainMenuLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout backgroundTrainMenuPanelLayout = new javax.swing.GroupLayout(backgroundTrainMenuPanel);
        backgroundTrainMenuPanel.setLayout(backgroundTrainMenuPanelLayout);
        backgroundTrainMenuPanelLayout.setHorizontalGroup(
            backgroundTrainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundTrainMenuPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(trainMenuLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );
        backgroundTrainMenuPanelLayout.setVerticalGroup(
            backgroundTrainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundTrainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trainMenuLabel)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        sidePanel.add(backgroundTrainMenuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 250, 40));

        backroundPanel.add(sidePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 242, 560));

        trainPanel.setBackground(new java.awt.Color(255, 245, 245));
        trainPanel.setForeground(new java.awt.Color(255, 82, 82));

        trainHeadingLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        trainHeadingLabel.setForeground(new java.awt.Color(250, 82, 82));
        trainHeadingLabel.setText("Train wine model");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 82, 82));
        jLabel1.setText("Train path: ");

        trainPathLine.setBackground(new java.awt.Color(255, 82, 82));
        trainPathLine.setForeground(new java.awt.Color(255, 82, 82));

        pathTrainTextField.setBackground(new java.awt.Color(255, 245, 245));
        pathTrainTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        pathTrainTextField.setForeground(new java.awt.Color(255, 82, 82));
        pathTrainTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        algorithmComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        algorithmComboBox.setForeground(new java.awt.Color(255, 0, 0));
        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Decision tree", "KNN", "Naive Bayes", "Neural Network", "Support Vector Machine(SVM)" }));
        algorithmComboBox.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        algorithmComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        algorithmComboBox.setFocusable(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 82, 82));
        jLabel2.setText("Algorithm:");

        chooseEvaluateFileBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chooseEvaluateFileBtn.setForeground(new java.awt.Color(255, 82, 82));
        chooseEvaluateFileBtn.setText("Choose evaluate file");
        chooseEvaluateFileBtn.setActionCommand("Choose file train");
        chooseEvaluateFileBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        chooseEvaluateFileBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chooseEvaluateFileBtn.setFocusPainted(false);
        chooseEvaluateFileBtn.setFocusable(false);
        chooseEvaluateFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseEvaluateFileBtnActionPerformed(evt);
            }
        });

        trainModelBtn.setBackground(new java.awt.Color(255, 82, 82));
        trainModelBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        trainModelBtn.setForeground(new java.awt.Color(255, 255, 255));
        trainModelBtn.setText("Train Model");
        trainModelBtn.setActionCommand("Choose file train");
        trainModelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trainModelBtn.setFocusPainted(false);
        trainModelBtn.setFocusable(false);
        trainModelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainModelBtnActionPerformed(evt);
            }
        });

        saveModelBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        saveModelBtn.setForeground(new java.awt.Color(255, 82, 82));
        saveModelBtn.setText("Save Model");
        saveModelBtn.setActionCommand("Choose file train");
        saveModelBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        saveModelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveModelBtn.setFocusPainted(false);
        saveModelBtn.setFocusable(false);
        saveModelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModelBtnActionPerformed(evt);
            }
        });

        infoTrainModelTextArea.setEditable(false);
        infoTrainModelTextArea.setBackground(new java.awt.Color(255, 255, 255));
        infoTrainModelTextArea.setColumns(20);
        infoTrainModelTextArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        infoTrainModelTextArea.setForeground(new java.awt.Color(255, 82, 82));
        infoTrainModelTextArea.setRows(5);
        infoTrainModelTextArea.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        jScrollPane1.setViewportView(infoTrainModelTextArea);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 82, 82));
        jLabel14.setText("Evaluate path: ");

        pathEvaluateTextField.setBackground(new java.awt.Color(255, 245, 245));
        pathEvaluateTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        pathEvaluateTextField.setForeground(new java.awt.Color(255, 82, 82));
        pathEvaluateTextField.setToolTipText("");
        pathEvaluateTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        trainPathLine1.setBackground(new java.awt.Color(255, 82, 82));
        trainPathLine1.setForeground(new java.awt.Color(255, 82, 82));

        chooseTrainFileBtn1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chooseTrainFileBtn1.setForeground(new java.awt.Color(255, 82, 82));
        chooseTrainFileBtn1.setText("Choose train file");
        chooseTrainFileBtn1.setActionCommand("Choose file train");
        chooseTrainFileBtn1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        chooseTrainFileBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chooseTrainFileBtn1.setFocusPainted(false);
        chooseTrainFileBtn1.setFocusable(false);
        chooseTrainFileBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseTrainFileBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout trainPanelLayout = new javax.swing.GroupLayout(trainPanel);
        trainPanel.setLayout(trainPanelLayout);
        trainPanelLayout.setHorizontalGroup(
            trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, trainPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel14)
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)))
                .addGap(18, 18, 18)
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pathEvaluateTextField)
                            .addComponent(pathTrainTextField)
                            .addComponent(trainPathLine)
                            .addGroup(trainPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(trainHeadingLabel))
                            .addComponent(trainPathLine1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chooseEvaluateFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooseTrainFileBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, trainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, trainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, trainPanelLayout.createSequentialGroup()
                        .addComponent(trainModelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveModelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(117, 117, 117))))
        );
        trainPanelLayout.setVerticalGroup(
            trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(trainHeadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(pathTrainTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addComponent(trainPathLine, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pathEvaluateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)))
                    .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(chooseTrainFileBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(trainPanelLayout.createSequentialGroup()
                            .addGap(60, 60, 60)
                            .addComponent(chooseEvaluateFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(7, 7, 7)
                .addComponent(trainPathLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainModelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveModelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        backroundPanel.add(trainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 610, 540));

        classificationPanel.setBackground(new java.awt.Color(255, 245, 245));
        classificationPanel.setForeground(new java.awt.Color(255, 82, 82));

        ClassificationHeadingLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        ClassificationHeadingLabel.setForeground(new java.awt.Color(250, 82, 82));
        ClassificationHeadingLabel.setText("Wine Classification");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 82, 82));
        jLabel3.setText("Fixed acidity:");

        textField1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField1.setForeground(new java.awt.Color(255, 82, 82));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 82, 82));
        jLabel4.setText("Residual sugar: ");

        textField4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField4.setForeground(new java.awt.Color(255, 82, 82));

        textField10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField10.setForeground(new java.awt.Color(255, 82, 82));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 82, 82));
        jLabel5.setText("Sulphates:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 82, 82));
        jLabel6.setText("Alcohol:");

        textField11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField11.setForeground(new java.awt.Color(255, 82, 82));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 82, 82));
        jLabel7.setText("Volatile acidity: ");

        textField2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField2.setForeground(new java.awt.Color(255, 82, 82));

        textField8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField8.setForeground(new java.awt.Color(255, 82, 82));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 82, 82));
        jLabel8.setText("Density:");

        textField9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField9.setForeground(new java.awt.Color(255, 82, 82));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 82, 82));
        jLabel9.setText("pH:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 82, 82));
        jLabel10.setText("Citric acid:");

        textField3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField3.setForeground(new java.awt.Color(255, 82, 82));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 82, 82));
        jLabel11.setText("Chlorides:");

        textField5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField5.setForeground(new java.awt.Color(255, 82, 82));

        textField6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField6.setForeground(new java.awt.Color(255, 82, 82));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 82, 82));
        jLabel12.setText("Free sulfur dioxide:");

        textField7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textField7.setForeground(new java.awt.Color(255, 82, 82));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 82, 82));
        jLabel13.setText("Total sulfur dioxide:");

        predictTable.setForeground(new java.awt.Color(51, 51, 51));
        predictTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        predictTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        predictTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        predictTable.setSelectionForeground(new java.awt.Color(255, 82, 82));
        jScrollPane3.setViewportView(predictTable);

        predictBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        predictBtn.setForeground(new java.awt.Color(255, 82, 82));
        predictBtn.setText("Predict");
        predictBtn.setActionCommand("Choose file train");
        predictBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        predictBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        predictBtn.setFocusPainted(false);
        predictBtn.setFocusable(false);
        predictBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictBtnActionPerformed(evt);
            }
        });

        exportBtn.setBackground(new java.awt.Color(255, 82, 82));
        exportBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exportBtn.setForeground(new java.awt.Color(255, 255, 255));
        exportBtn.setText("Export");
        exportBtn.setActionCommand("Choose file train");
        exportBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exportBtn.setFocusPainted(false);
        exportBtn.setFocusable(false);
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });

        predictFileBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        predictFileBtn.setForeground(new java.awt.Color(255, 82, 82));
        predictFileBtn.setText("Predict File");
        predictFileBtn.setActionCommand("Choose file train");
        predictFileBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        predictFileBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        predictFileBtn.setFocusPainted(false);
        predictFileBtn.setFocusable(false);
        predictFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictFileBtnActionPerformed(evt);
            }
        });

        modelTypeComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        modelTypeComboBox.setForeground(new java.awt.Color(255, 0, 0));
        modelTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Decision tree", "KNN", "Naive Bayes", "Neural Network", "Support Vector Machine(SVM)" }));
        modelTypeComboBox.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 82, 82), 1, true));
        modelTypeComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        modelTypeComboBox.setFocusable(false);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 82, 82));
        jLabel15.setText("Model type");

        javax.swing.GroupLayout classificationPanelLayout = new javax.swing.GroupLayout(classificationPanel);
        classificationPanel.setLayout(classificationPanelLayout);
        classificationPanelLayout.setHorizontalGroup(
            classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classificationPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(classificationPanelLayout.createSequentialGroup()
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(classificationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textField10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(classificationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textField11, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(classificationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textField4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(classificationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classificationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textField3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classificationPanelLayout.createSequentialGroup()
                                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textField5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textField9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classificationPanelLayout.createSequentialGroup()
                                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(classificationPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(classificationPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(classificationPanelLayout.createSequentialGroup()
                                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel12))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(textField7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textField6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(188, 188, 188)))
                        .addContainerGap())
                    .addGroup(classificationPanelLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(predictBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(predictFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classificationPanelLayout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classificationPanelLayout.createSequentialGroup()
                        .addComponent(ClassificationHeadingLabel)
                        .addGap(88, 88, 88))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classificationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(modelTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(162, 162, 162))))
        );
        classificationPanelLayout.setVerticalGroup(
            classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classificationPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(ClassificationHeadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(classificationPanelLayout.createSequentialGroup()
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(textField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(textField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(classificationPanelLayout.createSequentialGroup()
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(textField2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(textField6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(textField7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(textField8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(classificationPanelLayout.createSequentialGroup()
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(classificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(predictBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(predictFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        backroundPanel.add(classificationPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 610, 560));

        closeBtn.setFont(new java.awt.Font("Lithos Pro Regular", 1, 36)); // NOI18N
        closeBtn.setForeground(new java.awt.Color(240, 62, 62));
        closeBtn.setText("X");
        closeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeBtnMouseClicked(evt);
            }
        });
        backroundPanel.add(closeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, -1, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backroundPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    void setColor(JPanel panel) {
        panel.setBackground(new Color(255, 135, 135));
    }

    void resetColor(JPanel panel) {
        panel.setBackground(new Color(250, 82, 82));
    }

    void changeColorMenu(JPanel panelSet, JPanel panelReset1) {
        setColor(panelSet);
        resetColor(panelReset1);
    }

    void visiblePanel(JPanel visiblePanel, JPanel hiddenPanel1) {
        visiblePanel.setVisible(true);
        hiddenPanel1.setVisible(false);
    }
    private void trainMenuLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trainMenuLabelMouseClicked
        // TODO add your handling code here:
        changeColorMenu(backgroundTrainMenuPanel, backgroundClassificationMenuPanel);
        visiblePanel(trainPanel, classificationPanel);
    }//GEN-LAST:event_trainMenuLabelMouseClicked

    private void classificationMenuLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classificationMenuLabelMouseClicked
        // TODO add your handling code here:
        changeColorMenu(backgroundClassificationMenuPanel, backgroundTrainMenuPanel);
        visiblePanel(classificationPanel, trainPanel);
    }//GEN-LAST:event_classificationMenuLabelMouseClicked

    private void backgroundTrainMenuPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundTrainMenuPanelMouseClicked
        // TODO add your handling code here:
        changeColorMenu(backgroundTrainMenuPanel, backgroundClassificationMenuPanel);
        visiblePanel(trainPanel, classificationPanel);
    }//GEN-LAST:event_backgroundTrainMenuPanelMouseClicked

    private void backgroundClassificationMenuPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundClassificationMenuPanelMouseClicked
        // TODO add your handling code here:
        changeColorMenu(backgroundClassificationMenuPanel, backgroundTrainMenuPanel);
        visiblePanel(classificationPanel, trainPanel);
    }//GEN-LAST:event_backgroundClassificationMenuPanelMouseClicked

    private void closeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBtnMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeBtnMouseClicked
    public void decisionTreeTrain() {
        try {
            decisionTreeModel = new DecisionTreeModel("", "-C 0.25 -M 2", null);
            decisionTreeModel.buildDecisionTree(pathTrainTextField.getText());
            String str = decisionTreeModel.evaluteTree(pathEvaluateTextField.getText());
            infoTrainModelTextArea.setText(str);
        } catch (Exception ex) {
            //Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void KNNTrain() {
        try {
            KNNModel = new KNNModel("", "-K 4 -W 0 -X -A \"weka.core.neighboursearch.LinearNNSearch -A \\\"weka.core.EuclideanDistance -R first-last\\\"\"", null);
            KNNModel.buildkNN(pathTrainTextField.getText());
            String str = KNNModel.evalutekNN(pathEvaluateTextField.getText());
            infoTrainModelTextArea.setText(str);
        } catch (Exception ex) {
            //Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void naiveBayesTrain() {
        try {
            naiveBayesModel = new NaiveBayesModel("", "", null);
            naiveBayesModel.bui1Naivebayes(pathTrainTextField.getText());
            String str = naiveBayesModel.evaluateNaiveBayes(pathEvaluateTextField.getText());
            infoTrainModelTextArea.setText(str);
        } catch (Exception ex) {
            //Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void neuralNetworkTrain() {
        try {
            neuralNetworkModel = new NeuralNetworkModel("", "-L 0.3 -M 0.2 -N 500 -V 0 -S 0 -E 20 -H a -R", null);
            neuralNetworkModel.buildNeuralNetwork(pathTrainTextField.getText());
            String str = neuralNetworkModel.evaluateNeuralNetwork(pathEvaluateTextField.getText());
            infoTrainModelTextArea.setText(str);
        } catch (Exception ex) {
            //Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void SVMTrain() {
        try {
            SVMModel = new SVMModel("", "-C 1.0 -L 0.001 -P 1.0E-12 -N 0 -V -1 -W 1 -K \"weka.classifiers.functions.supportVector.PolyKernel -E 1.0 -C 250007\" -calibrator \"weka.classifiers.functions.Logistic -R 1.0E-8 -M -1 -num-decimal-places 4\"", null);
            SVMModel.buildSVM(pathTrainTextField.getText());
            String str = SVMModel.evaluateSVM(pathEvaluateTextField.getText());
            infoTrainModelTextArea.setText(str);
        } catch (Exception ex) {
            //Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public JFileChooser getFileViaUI(String fileTypeName, String fileType) {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                fileTypeName, fileType);
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return chooser;
        }
        return null;
    }

    private void trainModelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainModelBtnActionPerformed
        // TODO add your handling code here:
        switch (algorithmComboBox.getSelectedIndex()) {
            case 0 -> {
                decisionTreeTrain();
            }
            case 1 -> {
                KNNTrain();
            }
            case 2 -> {
                naiveBayesTrain();
            }
            case 3 -> {
                neuralNetworkTrain();
            }
            case 4 -> {
                SVMTrain();
            }
            default -> {
                KNNTrain();
            }
        }
    }//GEN-LAST:event_trainModelBtnActionPerformed

    private void saveModelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveModelBtnActionPerformed
        // TODO add your handling code here:
        switch (algorithmComboBox.getSelectedIndex()) {
            case 0 -> {
                try {
                    decisionTreeModel.saveModel(currentPath + "\\model\\decisionTreeModel.model", decisionTreeModel.tree);
                    JOptionPane.showMessageDialog(null, "Successful save!");
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 1 -> {
                try {
                    KNNModel.saveModel(currentPath + "\\model\\KNNModel.model", KNNModel.knn);
                    JOptionPane.showMessageDialog(null, "Successful save!");
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 2 -> {
                try {
                    naiveBayesModel.saveModel(currentPath + "\\model\\naiveBayesModel.model", naiveBayesModel.nbayes);
                    JOptionPane.showMessageDialog(null, "Successful save!");
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 3 -> {
                try {
                    neuralNetworkModel.saveModel(currentPath + "\\model\\neuralNetworkModel.model", neuralNetworkModel.neural);
                    JOptionPane.showMessageDialog(null, "Successful save!");
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 4 -> {
                try {
                    SVMModel.saveModel(currentPath + "\\model\\SVMModel.model", SVMModel.svm);
                    JOptionPane.showMessageDialog(null, "Successful save!");
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            default -> {
                try {
                    KNNModel.saveModel(currentPath + "\\model\\KNNModel.model", KNNModel.knn);
                    JOptionPane.showMessageDialog(null, "Successful save!");
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_saveModelBtnActionPerformed

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        String fileName;
        JFrame parentFrame = new JFrame();
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Specify a file to save");
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Arff file", "arff");
        chooser.setFileFilter(filter);

        int userSelection = chooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = chooser.getSelectedFile();
            fileName = fileToSave.getAbsolutePath();
            if(!fileName.contains(".arff")) {
                fileName += ".arff";
            }
            try {
                KnowledgeModel model = new KnowledgeModel();
                model.saveData(fileName, labelData);
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_exportBtnActionPerformed

    public void loadDataTempPredict() {
        DefaultTableModel defaultTableModel = new DefaultTableModel();
        predictTable.setModel(defaultTableModel);
        String csvFile = currentPath + "\\data\\tempPredict.csv";
        ArrayList<String[]> data = ReadCsv.read(csvFile);
        if (data != null) {
            for (String column : data.get(0)) {
                defaultTableModel.addColumn(column.replaceAll("\'", "").toUpperCase());
            }
            for (int i = 1; i < data.size(); i++) {
                defaultTableModel.addRow(data.get(i));
            }
        }
    }

    private void predictFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictFileBtnActionPerformed
        // TODO add your handling code here:
        String pathUnlabel = "";
        JFileChooser chooser = getFileViaUI("Arff File", "arff");
        if (chooser != null) {
            pathUnlabel = chooser.getSelectedFile().getPath();
        } else {
            return;
        }
        switch (modelTypeComboBox.getSelectedIndex()) {
            case 0 -> {
                try {
                    String pathModel = currentPath + "\\model\\decisionTreeModel.model";
                    if (new File(pathModel).isFile()) {
                        DecisionTreeModel model = new DecisionTreeModel("", "", null);
                        model.tree = (J48) model.loadModel(pathModel);
                        labelData = model.predictClassLabel(pathUnlabel);
                        model.saveData2CSVByInstance(currentPath + "\\data\\tempPredict.csv", labelData);
                        loadDataTempPredict();

                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 1 -> {
                try {
                    String pathModel = currentPath + "\\model\\KNNModel.model";
                    if (new File(pathModel).isFile()) {
                        KNNModel model = new KNNModel("", "", null);
                        model.knn = (IBk) model.loadModel(pathModel);
                        labelData = model.predictClassLabel(pathUnlabel);
                        model.saveData2CSVByInstance(currentPath + "\\data\\tempPredict.csv", labelData);
                        loadDataTempPredict();
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case 2 -> {
                try {
                    String pathModel = currentPath + "\\model\\naiveBayesModel.model";
                    if (new File(pathModel).isFile()) {
                        NaiveBayesModel model = new NaiveBayesModel("", "", null);
                        model.nbayes = (NaiveBayes) model.loadModel(pathModel);
                        labelData = model.predictClassLabel(pathUnlabel);
                        model.saveData2CSVByInstance(currentPath + "\\data\\tempPredict.csv", labelData);
                        loadDataTempPredict();
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case 3 -> {
                try {
                    String pathModel = currentPath + "\\model\\neuralNetworkModel.model";
                    if (new File(pathModel).isFile()) {
                        NeuralNetworkModel model = new NeuralNetworkModel("", "", null);
                        model.neural = (MultilayerPerceptron) model.loadModel(pathModel);
                        labelData = model.predictClassLabel(pathUnlabel);
                        model.saveData2CSVByInstance(currentPath + "\\data\\tempPredict.csv", labelData);
                        loadDataTempPredict();
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case 4 -> {
                try {
                    String pathModel = currentPath + "\\model\\SVMModel.model";
                    if (new File(pathModel).isFile()) {
                        SVMModel model = new SVMModel("", "", null);
                        model.svm = (SMO) model.loadModel(pathModel);
                        labelData = model.predictClassLabel(pathUnlabel);
                        model.saveData2CSVByInstance(currentPath + "\\data\\tempPredict.csv", labelData);
                        loadDataTempPredict();
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            default -> {
                try {
                    String pathModel = currentPath + "\\model\\KNNModel.model";
                    if (new File(pathModel).isFile()) {
                        KNNModel model = new KNNModel("", "", null);
                        model.knn = (IBk) model.loadModel(pathModel);
                        labelData = model.predictClassLabel(pathUnlabel);
                        model.saveData2CSVByInstance(currentPath + "\\data\\tempPredict.csv", labelData);
                        loadDataTempPredict();
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_predictFileBtnActionPerformed

    private void chooseTrainFileBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseTrainFileBtn1ActionPerformed
        JFileChooser chooser = getFileViaUI("Arff File", "arff");
        if (chooser != null) {
            pathTrainTextField.setText(chooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_chooseTrainFileBtn1ActionPerformed

    private void chooseEvaluateFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseEvaluateFileBtnActionPerformed
        JFileChooser chooser = getFileViaUI("Arff File", "arff");
        if (chooser != null) {
            pathEvaluateTextField.setText(chooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_chooseEvaluateFileBtnActionPerformed

    public void predictData(Wine wine) {
        String pathUnlabel = currentPath + "\\data\\wine-unlabel.arff";
        switch (modelTypeComboBox.getSelectedIndex()) {
            case 0 -> {
                try {
                    String pathModel = currentPath + "\\model\\decisionTreeModel.model";
                    if (new File(pathModel).isFile()) {
                        DecisionTreeModel model = new DecisionTreeModel("", "", null);
                        model.tree = (J48) model.loadModel(pathModel);
                        String res = model.predictOneClassLabel(pathUnlabel, wine.getInstanceData());
                        JOptionPane.showMessageDialog(null, "Wine qualification predict by DecisionTreeModel(1-10): " + res);
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");

                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 1 -> {
                try {
                    String pathModel = currentPath + "\\model\\KNNModel.model";
                    if (new File(pathModel).isFile()) {
                        KNNModel model = new KNNModel("", "", null);
                        model.knn = (IBk) model.loadModel(pathModel);
                        String res = model.predictOneClassLabel(pathUnlabel, wine.getInstanceData());
                        JOptionPane.showMessageDialog(null, "Wine qualification predict by KNNModel(1-10): " + res);
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");

                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 2 -> {
                try {
                    String pathModel = currentPath + "\\model\\naiveBayesModel.model";
                    if (new File(pathModel).isFile()) {
                        NaiveBayesModel model = new NaiveBayesModel("", "", null);
                        model.nbayes = (NaiveBayes) model.loadModel(pathModel);
                        String res = model.predictOneClassLabel(pathUnlabel, wine.getInstanceData());
                        JOptionPane.showMessageDialog(null, "Wine qualification predict by NaiveBayesModel(1-10): " + res);
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");

                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 3 -> {
                try {
                    String pathModel = currentPath + "\\model\\neuralNetworkModel.model";
                    if (new File(pathModel).isFile()) {
                        NeuralNetworkModel model = new NeuralNetworkModel("", "", null);
                        model.neural = (MultilayerPerceptron) model.loadModel(pathModel);
                        String res = model.predictOneClassLabel(pathUnlabel, wine.getInstanceData());
                        JOptionPane.showMessageDialog(null, "Wine qualification predict by NeuralNetworkModel(1-10): " + res);
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");

                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 4 -> {
                try {
                    String pathModel = currentPath + "\\model\\SVMModel.model";
                    if (new File(pathModel).isFile()) {
                        SVMModel model = new SVMModel("", "", null);
                        model.svm = (SMO) model.loadModel(pathModel);
                        String res = model.predictOneClassLabel(pathUnlabel, wine.getInstanceData());
                        JOptionPane.showMessageDialog(null, "Wine qualification predict by SVMModel(1-10): " + res);
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");

                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }

            default -> {
                try {
                    String pathModel = currentPath + "\\model\\KNNModel.model";
                    if (new File(pathModel).isFile()) {
                        KNNModel model = new KNNModel("", "", null);
                        model.knn = (IBk) model.loadModel(pathModel);
                        String res = model.predictOneClassLabel(pathUnlabel, wine.getInstanceData());
                        JOptionPane.showMessageDialog(null, "Wine qualification predict by KNNModel(1-10): " + res);
                    } else {
                        JOptionPane.showMessageDialog(null, "decisionTreeModel.model don't exist, Please train and save it before predict");

                    }
                } catch (Exception ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void predictBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictBtnActionPerformed
        // TODO add your handling code here:
        float fixedAcidity = Float.parseFloat(textField1.getText());
        float volatileAcidity = Float.parseFloat(textField2.getText());
        float citricAcid = Float.parseFloat(textField3.getText());
        float residualSugar = Float.parseFloat(textField4.getText());
        float chlorides = Float.parseFloat(textField5.getText());
        float freeSulfurDioxide = Float.parseFloat(textField6.getText());
        float totalSulfurDioxide = Float.parseFloat(textField7.getText());
        float density = Float.parseFloat(textField8.getText());
        float pH = Float.parseFloat(textField9.getText());
        float sulphates = Float.parseFloat(textField10.getText());
        float alcohol = Float.parseFloat(textField11.getText());

        Wine wine = new Wine(fixedAcidity, volatileAcidity, citricAcid, residualSugar, chlorides, freeSulfurDioxide,
                totalSulfurDioxide, density, pH, sulphates, alcohol);

        try {
            predictData(wine);

        } catch (Exception ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_predictBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("FlatLaf Light".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        </editor-fold>

        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (Exception e) {

        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClassificationHeadingLabel;
    private javax.swing.JComboBox<String> algorithmComboBox;
    private javax.swing.JPanel backgroundClassificationMenuPanel;
    private javax.swing.JPanel backgroundTrainMenuPanel;
    private javax.swing.JPanel backroundPanel;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JButton chooseEvaluateFileBtn;
    private javax.swing.JButton chooseTrainFileBtn1;
    private javax.swing.JLabel classificationMenuLabel;
    private javax.swing.JPanel classificationPanel;
    private javax.swing.JLabel closeBtn;
    private javax.swing.JButton exportBtn;
    private javax.swing.JTextArea infoTrainModelTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> modelTypeComboBox;
    private javax.swing.JTextField pathEvaluateTextField;
    private javax.swing.JTextField pathTrainTextField;
    private javax.swing.JButton predictBtn;
    private javax.swing.JButton predictFileBtn;
    private javax.swing.JTable predictTable;
    private javax.swing.JButton saveModelBtn;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JTextField textField1;
    private javax.swing.JTextField textField10;
    private javax.swing.JTextField textField11;
    private javax.swing.JTextField textField2;
    private javax.swing.JTextField textField3;
    private javax.swing.JTextField textField4;
    private javax.swing.JTextField textField5;
    private javax.swing.JTextField textField6;
    private javax.swing.JTextField textField7;
    private javax.swing.JTextField textField8;
    private javax.swing.JTextField textField9;
    private javax.swing.JLabel trainHeadingLabel;
    private javax.swing.JLabel trainMenuLabel;
    private javax.swing.JButton trainModelBtn;
    private javax.swing.JPanel trainPanel;
    private javax.swing.JSeparator trainPathLine;
    private javax.swing.JSeparator trainPathLine1;
    private javax.swing.JLabel wineImg;
    // End of variables declaration//GEN-END:variables
}
